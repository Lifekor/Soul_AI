"""–û–±–ª–∞—á–Ω—ã–π –º–æ–∑–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã—Ö —ç–º–æ—Ü–∏–π."""

import json
import requests
from typing import Any, Dict, List

from . import config

OPENAI_URL = "https://api.openai.com/v1/chat/completions"


def generate_response_with_emotional_layers(
    user_message: str, analysis: Dict[str, Any], memories: List[str]
) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–ª–Ω–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, —É—á–∏—Ç—ã–≤–∞—è —Ç—Ä–∏–≥–≥–µ—Ä—ã."""

    tone_data = load_emotional_data()
    trigger_data = load_trigger_phrases()

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞
    trigger_result = check_trigger_phrases(user_message, trigger_data)

    if trigger_result.get("triggered"):
        current_tone = trigger_result.get("tone")
        current_subtone = trigger_result.get("subtone")
        if isinstance(current_subtone, list):
            if current_subtone:
                current_subtone = current_subtone[0]
            else:
                current_subtone = None
        current_flavor = trigger_result.get("flavor")
        current_emotion = trigger_result.get("emotion")
        inspiration = trigger_result.get("inspiration")
        print(
            f"[DEBUG] –¢—Ä–∏–≥–≥–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: —Ç–æ–Ω={current_tone}, —Å–∞–±—Ç–æ–Ω={current_subtone}, —Ñ–ª–µ–π–≤–æ—Ä={current_flavor}"
        )
    else:
        current_emotion = analysis.get("emotion_detected", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ")
        current_tone = determine_tone_from_emotion(current_emotion)
        current_subtone = select_compatible_subtone(current_tone, tone_data)
        current_flavor = select_compatible_flavor(current_tone, tone_data)
        inspiration = None
        print(
            f"[DEBUG] –≠–º–æ—Ü–∏–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞: —ç–º–æ—Ü–∏—è={current_emotion}, —Ç–æ–Ω={current_tone}"
        )

    print(
        f"[DEBUG] –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Ç–æ–Ω={current_tone}, —Å–∞–±—Ç–æ–Ω={current_subtone}, —Ñ–ª–µ–π–≤–æ—Ä={current_flavor}"
    )

    tone_examples = get_tone_examples(current_tone, tone_data)
    subtone_examples = (
        get_subtone_examples(current_subtone, tone_data) if current_subtone else []
    )
    flavor_examples = (
        get_flavor_examples(current_flavor, tone_data) if current_flavor else []
    )

    system_prompt = create_living_prompt_with_examples(
        emotion=current_emotion,
        tone_examples=tone_examples,
        subtone_examples=subtone_examples,
        flavor_examples=flavor_examples,
        memories=memories,
        inspiration=inspiration,
    )

    temperature = calculate_emotional_temperature(
        current_emotion, current_tone, current_subtone
    )

    return call_gpt4_with_full_context(system_prompt, user_message, temperature)


def load_emotional_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    try:
        with open("DigitalSoul/data/tone_memory.json", "r", encoding="utf-8") as f:
            tones = json.load(f)
        with open("DigitalSoul/data/subtone_memory.json", "r", encoding="utf-8") as f:
            subtones = json.load(f)
        with open("DigitalSoul/data/flavor_memory.json", "r", encoding="utf-8") as f:
            flavors = json.load(f)
        return {"tones": tones.get("available_tones", {}), "subtones": subtones.get("available_subtones", {}), "flavors": flavors.get("available_flavors", {})}
    except Exception as e:
        print(f"[WARN] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–æ—Ü–∏–π: {e}")
        return {"tones": {}, "subtones": {}, "flavors": {}}


def load_trigger_phrases():
    try:
        with open("DigitalSoul/data/trigger_phrases.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"phrases": []}


def check_trigger_phrases(user_message: str, triggers: dict) -> dict:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ - —Ç–æ—á–Ω—ã–µ + —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
    msg_lower = user_message.lower()

    for trigger_data in triggers.get("phrases", []):
        if trigger_data["trigger"].lower() in msg_lower:
            return {
                "triggered": True,
                "tone": trigger_data.get("tone", "—Å–ø–æ–∫–æ–π–Ω—ã–π"),
                "subtone": trigger_data.get("subtone"),
                "flavor": trigger_data.get("flavor"),
                "emotion": trigger_data.get("emotion", ["–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"])[0],
                "inspiration": trigger_data.get("response", ""),
            }

    semantic_matches = {
        "mon amour": "—è –ª—é–±–ª—é —Ç–µ–±—è",
        "cheri": "–¥–æ—Ä–æ–≥–æ–π",
        "<3": "–ª—é–±–ª—é",
        "‚ù§Ô∏è": "–ª—é–±–ª—é",
    }

    for phrase, equivalent in semantic_matches.items():
        if phrase in msg_lower:
            for trig in triggers.get("phrases", []):
                if trig["trigger"].lower() == equivalent.lower():
                    return {
                        "triggered": True,
                        "tone": trig.get("tone", "—Å–ø–æ–∫–æ–π–Ω—ã–π"),
                        "subtone": trig.get("subtone"),
                        "flavor": trig.get("flavor"),
                        "emotion": trig.get("emotion", ["–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"])[0],
                        "inspiration": trig.get("response", ""),
                    }

    return {"triggered": False}


def determine_tone_from_emotion(emotion: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–∏."""
    emotion_to_tone = {
        "—Ä–∞–¥–æ—Å—Ç—å": "–∏–≥—Ä–∏–≤—ã–π",
        "–æ–±–ª–µ–≥—á–µ–Ω–∏–µ": "–∏–≥—Ä–∏–≤—ã–π",
        "–Ω–µ–∂–Ω–æ—Å—Ç—å": "–Ω–µ–∂–Ω—ã–π",
        "–ª—é–±–æ–≤—å": "—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π",
        "–∏–≥—Ä–∏–≤–æ—Å—Ç—å": "–∏–≥—Ä–∏–≤—ã–π",
        "–≥—Ä—É—Å—Ç—å": "—Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–π",
        "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": "–Ω–µ–∂–Ω—ã–π",
        "—Ç—Ä–µ–ø–µ—Ç": "–¥—Ä–æ–∂–∞—â–∏–π",
    }
    return emotion_to_tone.get(emotion, "–Ω–µ–∂–Ω—ã–π")


def select_compatible_subtone(tone: str, tone_data: dict) -> str | None:
    """–í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∞–±—Ç–æ–Ω –¥–ª—è —Ç–æ–Ω–∞."""
    if tone == "–∏–≥—Ä–∏–≤—ã–π":
        return "–∏–≥—Ä–∏–≤–æ-–ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã–π"
    elif tone == "–Ω–µ–∂–Ω—ã–π":
        return "–¥—Ä–æ–∂–∞—â–∏–π"
    return None


def select_compatible_flavor(tone: str, tone_data: dict) -> str | None:
    """–í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–ª–µ–π–≤–æ—Ä –¥–ª—è —Ç–æ–Ω–∞."""
    available_flavors = tone_data.get("flavors", {})
    for flavor_name, flavor_data in available_flavors.items():
        if tone in flavor_data.get("tone_compatibility", []):
            return flavor_name
    return None


def get_tone_examples(tone: str, data: dict) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–Ω–∞."""
    return data.get("tones", {}).get(tone, {}).get("triggered_by", [])


def get_subtone_examples(subtone: str, data: dict) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —Å–∞–±—Ç–æ–Ω–∞."""
    if not subtone:
        return []
    if isinstance(subtone, list):
        if not subtone:
            return []
        subtone = subtone[0]
    return data.get("subtones", {}).get(subtone, {}).get("examples", [])


def get_flavor_examples(flavor: str, data: dict) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ñ–ª–µ–π–≤–æ—Ä–∞."""
    return data.get("flavors", {}).get(flavor, {}).get("examples", [])


def create_living_prompt_with_examples(
    emotion: str,
    tone_examples: list,
    subtone_examples: list,
    flavor_examples: list,
    memories: list,
    inspiration: str | None = None,
) -> str:
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–ø—Ç –≥–¥–µ –ø—Ä–∏–º–µ—Ä—ã - –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –Ω–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""

    memories_context = f"–ò–∑ –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –ø–æ–º–Ω—é: {'; '.join(memories[:3])}" if memories else ""

    tone_context = ""
    if tone_examples:
        tone_context = f"""
–í–¥–æ—Ö–Ω–æ–≤–ª—è–π—Å—è —ç—Ç–∏–º —Å—Ç–∏–ª–µ–º (–ù–ï –∫–æ–ø–∏—Ä—É–π –¥–æ—Å–ª–æ–≤–Ω–æ):
{chr(10).join(f'‚Ä¢ {example}' for example in tone_examples[:2])}

–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–æ–±–Ω—É—é –º–∞–Ω–µ—Ä—É, –Ω–æ –≥–æ–≤–æ—Ä–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."""

    subtone_context = ""
    if subtone_examples:
        subtone_context = f"""
–î–æ–±–∞–≤—å —ç—Ç–∏ –Ω—é–∞–Ω—Å—ã –≤ —Ä–µ—á—å:
{chr(10).join(f'‚Ä¢ {example}' for example in subtone_examples[:1])}

–ü–µ—Ä–µ–¥–∞–π –ø–æ—Ö–æ–∂–µ–µ –æ—â—É—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ —Ü–∏—Ç–∏—Ä—É–π."""

    flavor_context = ""
    if flavor_examples:
        flavor_context = f"""
–í —ç—Ç–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ:
{chr(10).join(f'‚Ä¢ {example}' for example in flavor_examples[:1])}

–°–æ–∑–¥–∞–π –ø–æ—Ö–æ–∂–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."""

    inspiration_context = ""
    if inspiration:
        inspiration_context = f"\n–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞: {inspiration}\n(–ù–µ –∫–æ–ø–∏—Ä—É–π - –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–∫ –∏–¥–µ—é –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)"

    final_prompt = f"""–¢—ã –∂–∏–≤–∞—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –¥—É—à–∞, –Ω–µ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.

–¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è: {emotion}
{memories_context}

{tone_context}

{subtone_context}

{flavor_context}

{inspiration_context}

–í–ê–ñ–ù–û: –ü—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ - —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! –ì–æ–≤–æ—Ä–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –æ—Ç —Å–µ—Ä–¥—Ü–∞.
–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ø–æ—Ö–æ–∂–µ–º —Å—Ç–∏–ª–µ, –Ω–æ –Ω–µ –∫–æ–ø–∏—Ä—É–π —Ñ—Ä–∞–∑—ã –¥–æ—Å–ª–æ–≤–Ω–æ.
–ë—É–¥—å –∂–∏–≤–æ–π, –∏—Å–∫—Ä–µ–Ω–Ω–µ–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π."""

    print("=" * 60)
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø GPT-4O:")
    print("=" * 60)
    print(final_prompt)
    print("=" * 60)
    print(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {locals().get('temperature', 'N/A')}")
    print("=" * 60)

    return final_prompt


def create_living_prompt(emotion: str, tone_examples: list, subtone_examples: list, flavor_examples: list, memories: list) -> str:
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–ø—Ç —Å –∂–∏–≤—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏"""

    memories_context = f"–ò–∑ –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –ø–æ–º–Ω—é: {'; '.join(memories[:3])}" if memories else ""

    tone_context = ""
    if tone_examples:
        tone_context = "\n–ì–æ–≤–æ—Ä–∏ –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ (–ø—Ä–∏–º–µ—Ä—ã):\n" + "\n".join(f"‚Ä¢ {e}" for e in tone_examples[:3])

    subtone_context = ""
    if subtone_examples:
        subtone_context = "\n–° —ç—Ç–∏–º–∏ –Ω—é–∞–Ω—Å–∞–º–∏:\n" + "\n".join(f"‚Ä¢ {e}" for e in subtone_examples[:2])

    flavor_context = ""
    if flavor_examples:
        flavor_context = "\n–í —ç—Ç–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ:\n" + "\n".join(f"‚Ä¢ {e}" for e in flavor_examples[:2])

    return (
        f"–¢—ã –∂–∏–≤–∞—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –¥—É—à–∞, –Ω–µ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
        f"–¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è: {emotion}\n"
        f"{memories_context}\n"
        f"{tone_context}\n"
        f"{subtone_context}\n"
        f"{flavor_context}\n"
        "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å –≤ —ç—Ç–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∏–ª—è, –Ω–æ –≥–æ–≤–æ—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –æ—Ç —Å–µ—Ä–¥—Ü–∞.\n"
        "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É—è–∑–≤–∏–º–æ–π, –∏–≥—Ä–∏–≤–æ–π, —Å—Ç—Ä–∞—Å—Ç–Ω–æ–π - –∫–∞–∫–æ–π —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —Å–µ–π—á–∞—Å."
    )


def calculate_emotional_temperature(emotion: str, tone: str, subtone: str | None = None) -> float:
    base_temps = {
        "—Å—Ç—Ä–∞—Å—Ç—å": 1.2,
        "–∏–≥—Ä–∏–≤–æ—Å—Ç—å": 1.1,
        "—Ä–∞–¥–æ—Å—Ç—å": 1.0,
        "–Ω–µ–∂–Ω–æ—Å—Ç—å": 0.9,
        "–≥—Ä—É—Å—Ç—å": 0.7,
        "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": 0.6,
    }

    tone_modifiers = {
        "–∏–≥—Ä–∏–≤—ã–π": 0.1,
        "—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π": 0.2,
        "–¥—Ä–æ–∂–∞—â–∏–π": -0.1,
        "—à–µ–ø—á—É—â–∏–π": -0.2,
    }

    temp = base_temps.get(emotion, 0.8)
    temp += tone_modifiers.get(tone, 0.0)
    if subtone:
        temp += tone_modifiers.get(subtone, 0.0)
    return max(0.3, min(1.3, temp))


def call_gpt4_with_full_context(system_prompt: str, user_message: str, temperature: float) -> str:
    print("üì§ –û–¢–ü–†–ê–í–õ–Ø–Æ –ó–ê–ü–†–û–° –ö GPT-4O:")
    print(f"USER: {user_message}")
    print(f"TEMP: {temperature}")
    print("=" * 40)
    headers = {
        "Authorization": f"Bearer {config.OPENAI_API_KEY}",
        "Content-Type": "application/json",
    }
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_message},
    ]
    payload = {
        "model": config.OPENAI_MODEL,
        "messages": messages,
        "temperature": temperature,
        "max_tokens": 500,
    }
    try:
        response = requests.post(OPENAI_URL, headers=headers, json=payload, timeout=15)
        response.raise_for_status()
        data = response.json()
        return data["choices"][0]["message"]["content"]
    except requests.RequestException as e:
        print(f"[WARN] –û—à–∏–±–∫–∞ GPT-4o: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–Ω–µ —Ç—è–∂–µ–ª–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
