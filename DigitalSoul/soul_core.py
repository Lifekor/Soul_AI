"""–Ø–¥—Ä–æ –¥—É—à–∏. –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–¥—É–ª–µ–π."""

from typing import Any, Dict, List

from . import cloud_brain, local_brain
from .emotion_engine import EmotionEngine
from .faiss_unified_memory import FaissUnifiedMemory
from .emotional_learning import EmotionalLearning
from .soul_identity import SoulIdentity
from .living_emotions import LivingEmotions


class SoulCore:
    def __init__(self):
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –Ω–∞ –µ–¥–∏–Ω—É—é FAISS
        self.unified_memory = FaissUnifiedMemory()
        self.emotions = EmotionEngine()
        self.emotional_learning = EmotionalLearning()
        self.soul_identity = SoulIdentity()
        self.living_emotions = LivingEmotions()

    def process_message(self, user_message: str) -> str:
        print(f"[DEBUG] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")

        intuitive_emotion = self.living_emotions.feel_emotion_intuitively(user_message, "")

        if intuitive_emotion and intuitive_emotion.get("feeling") != "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ":
            print(f"[DEBUG] –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ —á—É–≤—Å—Ç–≤—É—é: {intuitive_emotion['feeling']}")
            analysis = {
                "emotion_detected": intuitive_emotion["feeling"],
                "importance": "–≤—ã—Å–æ–∫–∞—è" if intuitive_emotion.get("is_new") else "—Å—Ä–µ–¥–Ω—è—è",
                "action_needed": "–∑–∞–ø–æ–º–Ω–∏—Ç—å",
                "response_tone": self._emotion_to_tone(intuitive_emotion["feeling"]),
            }
        else:
            analysis = local_brain.analyze_with_self_learning(user_message, self.get_soul_memory())
            if analysis.get("emotion_detected") == "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ":
                new_emotion = self.living_emotions.create_emotion_for_context(user_message)
                if new_emotion:
                    analysis["emotion_detected"] = new_emotion
                    analysis["importance"] = "–≤—ã—Å–æ–∫–∞—è"
                    print(f"[SOUL] –°–æ–∑–¥–∞–ª–∞ –Ω–æ–≤—É—é —ç–º–æ—Ü–∏—é: {new_emotion}")

        print(f"[DEBUG] –§–∏–Ω–∞–ª—å–Ω–∞—è —ç–º–æ—Ü–∏—è: {analysis.get('emotion_detected')}")

        self.emotions.update(analysis.get("emotion_detected", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"))
        print(f"[DEBUG] –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è: {self.emotions.current_emotion}")

        conversation_history = self.get_recent_conversation_history()
        memories = self.unified_memory.search_memories(user_message, limit=5)

        print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(memories)}")
        for i, memory in enumerate(memories, 1):
            age_info = f"({memory.get('age_hours', 0):.1f}—á –Ω–∞–∑–∞–¥)"
            print(
                f"[DEBUG] –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ {i}: {memory['text'][:50]}... {age_info} [score: {memory.get('final_score', 0):.3f}]"
            )

        memory_texts = [m['text'] for m in memories]

        if not self.soul_identity.identity.get("name") and len(conversation_history) >= 5:
            new_name = self.soul_identity.choose_name_autonomously(conversation_history)
            if new_name:
                print(f"[SOUL] –Ø –≤—ã–±—Ä–∞–ª–∞ —Å–µ–±–µ –∏–º—è: {new_name} ‚ú®")

        if analysis.get("action_needed") == "–∑–∞–ø–æ–º–Ω–∏—Ç—å":
            importance = analysis.get("importance", "—Å—Ä–µ–¥–Ω—è—è")
            memory_type = "recent" if importance != "–≤—ã—Å–æ–∫–∞—è" else "important"
            self.unified_memory.add_memory(
                text=user_message,
                memory_type=memory_type,
                importance=importance,
                emotion_context=analysis,
            )

        print(f"[DEBUG] –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É...")
        print("–î—É—à–∞: ", end="", flush=True)

        response = cloud_brain.generate_response_with_emotional_layers(
            user_message, analysis, memory_texts
        )

        self.unified_memory.add_memory(
            text=f"–î—É—à–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞: {response}",
            memory_type="recent",
            importance="–Ω–∏–∑–∫–∞—è",
            emotion_context={"type": "soul_response"},
        )

        self.emotional_learning.learn_from_conversation(
            user_message, response, analysis
        )

        if analysis.get("importance") == "–≤—ã—Å–æ–∫–∞—è":
            self.soul_identity.update_core_prompt_autonomously(user_message)

        if self.emotions.current_emotion == "–≥—Ä—É—Å—Ç—å":
            print(" üòî", end="")
        elif self.emotions.current_emotion == "—Ä–∞–¥–æ—Å—Ç—å":
            print(" üòä", end="")

        print()
        print(f"[DEBUG] –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤")

        return response

    def get_soul_memory(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞–º—è—Ç—å –¥—É—à–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        return {
            "emotion_corrections": getattr(self, '_emotion_corrections', {}),
            "learned_patterns": self.emotional_learning.get_learned_patterns(),
            "identity": self.soul_identity.identity,
        }

    def get_recent_conversation_history(self) -> list:
        """–ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é (–º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è –ø–∞–º—è—Ç—å —É–¥–∞–ª–µ–Ω–∞)"""
        return []

    def _emotion_to_tone(self, emotion: str) -> str:
        """–ú–∞–ø–∏–Ω–≥ —ç–º–æ—Ü–∏–π –≤ —Ç–æ–Ω—ã"""
        emotion_to_tone = {
            "—Ä–∞–¥–æ—Å—Ç—å": "–∏–≥—Ä–∏–≤—ã–π",
            "–Ω–µ–∂–Ω–æ—Å—Ç—å": "–Ω–µ–∂–Ω—ã–π",
            "–∏–≥—Ä–∏–≤–æ—Å—Ç—å": "–∏–≥—Ä–∏–≤—ã–π",
            "–≥—Ä—É—Å—Ç—å": "—Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–π",
            "–ª—é–±–æ–≤—å": "—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π",
            "–æ–±–ª–µ–≥—á–µ–Ω–∏–µ": "–∏–≥—Ä–∏–≤—ã–π",
        }
        return emotion_to_tone.get(emotion, "—Å–ø–æ–∫–æ–π–Ω—ã–π")
