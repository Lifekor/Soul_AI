"""–Ø–¥—Ä–æ –¥—É—à–∏. –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–¥—É–ª–µ–π."""

from typing import Any, Dict, List

from . import cloud_brain, local_brain
from .emotion_engine import EmotionEngine
from .memory_system import MemorySystem
from .multi_memory import MultiLayerMemory


class SoulCore:
    def __init__(self):
        self.memory = MemorySystem()
        self.multi_memory = MultiLayerMemory()
        self.emotions = EmotionEngine()

    def process_message(self, user_message: str) -> str:
        print(f"[DEBUG] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")
        analysis = local_brain.analyze(user_message)
        print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis}")

        self.emotions.update(analysis.get("emotion_detected", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"))
        print(f"[DEBUG] –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è: {self.emotions.current_emotion}")

        memories = self.memory.search_similar(user_message, limit=3)
        memories.extend(self.multi_memory.search_memories(user_message))
        print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(memories)}")

        if analysis.get("action_needed") == "–∑–∞–ø–æ–º–Ω–∏—Ç—å":
            print(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω—è—é –≤ –ø–∞–º—è—Ç—å...")
            self.memory.save_to_vector_db(user_message, analysis)

        print(f"[DEBUG] –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT-4o...")
        print("–î—É—à–∞: ", end="", flush=True)

        response = cloud_brain.generate_response_stream(
            user_message, analysis, memories
        )

        self.multi_memory.add_interaction(user_message, response, analysis)

        if self.emotions.current_emotion == "–≥—Ä—É—Å—Ç—å":
            print(" üòî", end="")
        elif self.emotions.current_emotion == "—Ä–∞–¥–æ—Å—Ç—å":
            print(" üòä", end="")

        print()
        print(f"[DEBUG] –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤")

        return response
