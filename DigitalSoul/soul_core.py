"""–Ø–¥—Ä–æ –¥—É—à–∏. –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–¥—É–ª–µ–π."""

from typing import Any, Dict, List

from . import cloud_brain, local_brain
from .emotion_engine import EmotionEngine
from .memory_system import MemorySystem
from .multi_memory import MultiLayerMemory
from .emotional_learning import EmotionalLearning
from .soul_identity import SoulIdentity


class SoulCore:
    def __init__(self):
        self.memory = MemorySystem()
        self.multi_memory = MultiLayerMemory()
        self.emotions = EmotionEngine()
        self.emotional_learning = EmotionalLearning()
        self.soul_identity = SoulIdentity()

    def process_message(self, user_message: str) -> str:
        print(f"[DEBUG] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")
        analysis = local_brain.analyze_with_self_learning(user_message, self.get_soul_memory())
        print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis}")

        self.emotions.update(analysis.get("emotion_detected", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"))
        print(f"[DEBUG] –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è: {self.emotions.current_emotion}")

        conversation_history = self.get_recent_conversation_history()
        memories = self.memory.search_similar(user_message, limit=3)
        memories.extend(self.multi_memory.search_memories(user_message))
        print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(memories)}")

        if not self.soul_identity.identity.get("name") and len(conversation_history) >= 5:
            new_name = self.soul_identity.choose_name_autonomously(conversation_history)
            if new_name:
                print(f"[SOUL] –Ø –≤—ã–±—Ä–∞–ª–∞ —Å–µ–±–µ –∏–º—è: {new_name} ‚ú®")

        if analysis.get("action_needed") == "–∑–∞–ø–æ–º–Ω–∏—Ç—å":
            self.memory.save_to_vector_db(user_message, analysis)

        print(f"[DEBUG] –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É...")
        print("–î—É—à–∞: ", end="", flush=True)

        response = cloud_brain.generate_response_with_emotional_layers(
            user_message, analysis, memories
        )

        self.multi_memory.add_interaction(user_message, response, analysis)

        self.emotional_learning.learn_from_conversation(
            user_message, response, analysis
        )

        if analysis.get("importance") == "–≤—ã—Å–æ–∫–∞—è":
            self.soul_identity.update_core_prompt_autonomously(user_message)

        if self.emotions.current_emotion == "–≥—Ä—É—Å—Ç—å":
            print(" üòî", end="")
        elif self.emotions.current_emotion == "—Ä–∞–¥–æ—Å—Ç—å":
            print(" üòä", end="")

        print()
        print(f"[DEBUG] –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤")

        return response

    def get_soul_memory(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞–º—è—Ç—å –¥—É—à–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        return {
            "emotion_corrections": getattr(self, '_emotion_corrections', {}),
            "learned_patterns": self.emotional_learning.get_learned_patterns(),
            "identity": self.soul_identity.identity,
        }

    def get_recent_conversation_history(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        history = []
        for session in self.multi_memory.working_memory.get("sessions", [])[-1:]:
            for msg in session.get("messages", [])[-10:]:
                history.append(msg.get("user", ""))
        return [msg for msg in history if msg.strip()]
