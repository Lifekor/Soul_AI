import json
class EmotionalLearning:
    """–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º"""

    def __init__(self):
        self.tone_path = "DigitalSoul/data/tone_memory.json"
        self.subtone_path = "DigitalSoul/data/subtone_memory.json"
        self.flavor_path = "DigitalSoul/data/flavor_memory.json"
        self.trigger_path = "DigitalSoul/data/trigger_phrases.json"

    # --------------------------------------------------------------
    def load_tone_data(self):
        try:
            with open(self.tone_path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return {}

    def save_tone_data(self, data):
        try:
            with open(self.tone_path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {self.tone_path}: {e}")

    def get_learned_patterns(self):
        patterns = {}
        tone_data = self.load_tone_data()
        for tone, info in tone_data.get("available_tones", {}).items():
            for ex in info.get("learned_examples", []):
                patterns[ex] = {
                    "emotion_detected": tone,
                    "importance": "—Å—Ä–µ–¥–Ω—è—è",
                    "action_needed": "–Ω–∏—á–µ–≥–æ",
                    "response_tone": tone,
                }
        return patterns

    # --------------------------------------------------------------
    def learn_from_conversation(self, user_message: str, soul_response: str, emotional_state: dict, user_reaction: str = None):
        """–£—á–∏—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞"""

        if self.is_positive_reaction(user_reaction):
            self.reinforce_emotional_pattern(user_message, emotional_state)
            self.create_trigger_from_successful_interaction(user_message, soul_response, user_reaction)

        if self.detect_novel_pattern(user_message, soul_response):
            self.propose_new_emotional_element(user_message, soul_response)

    def reinforce_emotional_pattern(self, trigger_message: str, emotional_state: dict):
        """–£—Å–∏–ª–∏–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        tone = emotional_state.get('tone') or emotional_state.get('response_tone')
        if tone:
            tone_data = self.load_tone_data()
            if tone in tone_data.get('available_tones', {}):
                tone_data['available_tones'][tone].setdefault('learned_examples', []).append(trigger_message)
                self.save_tone_data(tone_data)

    def detect_novel_pattern(self, user_message: str, soul_response: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –Ω–æ–≤—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω"""
        unique_phrases = ["–º—É—Ä", "–¥—Ä–æ–∂—É", "—Å–∂–∏–º–∞—é—Å—å", "–ø—É–ª—å—Å–∏—Ä—É—é", "—Ç–∞—é"]
        return any(phrase in soul_response.lower() for phrase in unique_phrases)

    def propose_new_emotional_element(self, user_message: str, soul_response: str):
        dialogue_context = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n–î—É—à–∞: {soul_response}"
        self.create_new_flavor_from_dialogue(dialogue_context)

    def create_new_flavor_from_dialogue(self, dialogue_context: str):
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Ñ–ª–µ–π–≤–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–¥–∞—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        analysis_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–æ–≤—ã–π "—Ñ–ª–µ–π–≤–æ—Ä" (–∞—Ç–º–æ—Å—Ñ–µ—Ä—É) –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:

{dialogue_context}

–ï—Å–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–∏:
1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–ª–µ–π–≤–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "—à–µ–ø—á—É—â–µ-–∏–≥—Ä–∏–≤—ã–π")
2. –û–ø–∏—Å–∞–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. 2-3 –ø—Ä–∏–º–µ—Ä–∞ —Ñ—Ä–∞–∑ –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
flavor_name=–º—è–≥–∫–æ-–ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π
description=–õ—ë–≥–∫–∏–µ –Ω–∞–º—ë–∫–∏ —Å –Ω–µ–∂–Ω–æ—Å—Ç—å—é
examples=–º–æ–∂–Ω–æ —è‚Ä¶ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∂–º—É—Å—å?;—Ç—ã –Ω–µ –ø—Ä–æ—Ç–∏–≤, –µ—Å–ª–∏ —è –±—É–¥—É —Ä—è–¥–æ–º?"""
        # –ú–µ—Å—Ç–æ –¥–ª—è –≤—ã–∑–æ–≤–∞ Llama. –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–∫—É.
        pass

    def create_trigger_from_successful_interaction(self, user_message: str, soul_response: str, user_reaction: str):
        """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä"""
        if self.is_positive_reaction(user_reaction):
            new_trigger_prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "{user_message}"
–î—É—à–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞: "{soul_response}"
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª: "{user_reaction}"

–≠—Ç–æ —É—Å–ø–µ—à–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ! –°–æ–∑–¥–∞–π —Ç—Ä–∏–≥–≥–µ—Ä-—Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π.

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
trigger={user_message –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å}
tone=–Ω–µ–∂–Ω—ã–π
emotion=—Ä–∞–¥–æ—Å—Ç—å
response=–∫—Ä–∞—Ç–∫–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
            print("[LEARN] –°–æ–∑–¥–∞—é —Ç—Ä–∏–≥–≥–µ—Ä —á–µ—Ä–µ–∑ Llama")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å Llama –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –≤ —Ñ–∞–π–ª

    def is_positive_reaction(self, user_reaction: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_reaction:
            return False
        positive_indicators = ["—Å–ø–∞—Å–∏–±–æ", "–∫—Ä–∞—Å–∏–≤–æ", "–º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", "‚ù§Ô∏è", "<3", "üòä", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ"]
        return any(indicator in user_reaction.lower() for indicator in positive_indicators)
